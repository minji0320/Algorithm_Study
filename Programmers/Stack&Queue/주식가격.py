### 문제 설명
# 초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때,
# 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.

### 제한사항
# prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.
# prices의 길이는 2 이상 100,000 이하입니다.

### 입출력 예
# prices	        return
# [1, 2, 3, 2, 3]	[4, 3, 1, 1, 0]

### 입출력 예 설명
# 1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다.
# 2초 시점의 ₩2은 끝까지 가격이 떨어지지 않았습니다.
# 3초 시점의 ₩3은 1초뒤에 가격이 떨어집니다. 따라서 1초간 가격이 떨어지지 않은 것으로 봅니다.
# 4초 시점의 ₩2은 1초간 가격이 떨어지지 않았습니다.
# 5초 시점의 ₩3은 0초간 가격이 떨어지지 않았습니다.

def solution(prices):
    n = len(prices)
    answer = [0] * n
    for i in range(n - 1):
        for j in range(i + 1, n):
            answer[i] += 1
            if prices[i] > prices[j]:
                break

    return answer

### 정확성  테스트 -> 느림!
# 테스트 1 〉	통과 (0.01ms, 10.2MB)
# 테스트 2 〉	통과 (0.05ms, 10.2MB)
# 테스트 3 〉	통과 (0.70ms, 10.3MB)
# 테스트 4 〉	통과 (0.72ms, 10.3MB)
# 테스트 5 〉	통과 (1.00ms, 10.3MB)
# 테스트 6 〉	통과 (0.03ms, 10.3MB)
# 테스트 7 〉	통과 (0.39ms, 10.2MB)
# 테스트 8 〉	통과 (0.56ms, 10.3MB)
# 테스트 9 〉	통과 (0.03ms, 10.1MB)
# 테스트 10 〉	통과 (1.62ms, 10.3MB)

### 효율성  테스트
# 테스트 1 〉	통과 (144.17ms, 18.9MB)
# 테스트 2 〉	통과 (116.47ms, 17.6MB)
# 테스트 3 〉	통과 (169.70ms, 19.6MB)
# 테스트 4 〉	통과 (129.02ms, 18.3MB)
# 테스트 5 〉	통과 (81.97ms, 17MB)

def solution2(prices):
    max_stack = []
    n = len(prices)
    answer = [0] * n
    for i in range(n - 1):
        # 스택 맨 위의 값이 현재 비교할 가격보다 높은 경우
        while max_stack != [] and max_stack[-1][1] > prices[i]:
            # 스택 맨 위의 값의 가격이 떨어지지 않은 기간 저장
            answer[max_stack[-1][0]] = i - max_stack[-1][0]
            max_stack.pop()

        max_stack.append((i, prices[i]))

    for i, v in max_stack:
        answer[i] = n - i - 1

    return answer

### 정확성  테스트
# 테스트 1 〉	통과 (0.01ms, 10.3MB)
# 테스트 2 〉	통과 (0.05ms, 10.2MB)
# 테스트 3 〉	통과 (0.31ms, 10.3MB)
# 테스트 4 〉	통과 (0.36ms, 10.3MB)
# 테스트 5 〉	통과 (0.42ms, 10.3MB)
# 테스트 6 〉	통과 (0.02ms, 10.2MB)
# 테스트 7 〉	통과 (0.22ms, 10.3MB)
# 테스트 8 〉	통과 (0.29ms, 10.3MB)
# 테스트 9 〉	통과 (0.02ms, 10.3MB)
# 테스트 10 〉	통과 (0.43ms, 10.3MB)

### 효율성  테스트
# 테스트 1 〉	통과 (37.32ms, 18.9MB)
# 테스트 2 〉	통과 (27.27ms, 17.6MB)
# 테스트 3 〉	통과 (42.26ms, 19.5MB)
# 테스트 4 〉	통과 (29.31ms, 18.3MB)
# 테스트 5 〉	통과 (20.46ms, 16.9MB)
